package database

import (
	"fmt"
	"strings"
	"time"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

type tickMsg time.Time

type DBModel struct {
	monitor      DBMonitor
	stats        *DBStats
	err          error
	ready        bool
	selectedTab  int
	tabs         []string
	connectionID string
}

func NewDBModel(monitor DBMonitor) *DBModel {
	return &DBModel{
		monitor:     monitor,
		tabs:        []string{"–û–±–∑–æ—Ä", "–¢–∞–±–ª–∏—Ü—ã", "–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"},
		selectedTab: 0,
	}
}

func (m *DBModel) Init() tea.Cmd {
	return tick()
}

func (m *DBModel) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "q", "ctrl+c", "esc":
			return m, tea.Quit
		case "tab":
			m.selectedTab = (m.selectedTab + 1) % len(m.tabs)
		case "shift+tab":
			m.selectedTab = (m.selectedTab - 1 + len(m.tabs)) % len(m.tabs)
		case "k":
			if m.connectionID != "" {
				if err := m.monitor.KillConnection(m.connectionID); err != nil {
					m.err = err
				}
			}
		}
	case tickMsg:
		if !m.ready {
			m.ready = true
		}

		stats, err := m.monitor.GetStats()
		if err != nil {
			m.err = err
		} else {
			m.stats = stats
			m.err = nil
		}

		return m, tick()
	}
	return m, nil
}

func (m *DBModel) View() string {
	if !m.ready {
		return "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
	}

	if m.err != nil {
		return fmt.Sprintf("–û—à–∏–±–∫–∞: %v\n–ù–∞–∂–º–∏—Ç–µ q –¥–ª—è –≤—ã—Ö–æ–¥–∞", m.err)
	}

	if m.stats == nil {
		return "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."
	}

	var sb strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	title := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#FF6B6B")).
		Bold(true).
		Render("üóÑÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
	sb.WriteString(title + "\n\n")

	// –¢–∞–±—ã
	tabs := m.renderTabs()
	sb.WriteString(tabs + "\n\n")

	// –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
	switch m.selectedTab {
	case 0:
		sb.WriteString(m.renderOverview())
	case 1:
		sb.WriteString(m.renderTables())
	case 2:
		sb.WriteString(m.renderSlowQueries())
	}

	// –ü–æ–º–æ—â—å
	help := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#626262")).
		Render("Tab: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ | q: –≤—ã—Ö–æ–¥ | k: –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
	sb.WriteString("\n\n" + help)

	return sb.String()
}

func (m *DBModel) renderTabs() string {
	var tabs []string
	for i, tab := range m.tabs {
		if i == m.selectedTab {
			tabs = append(tabs, lipgloss.NewStyle().
				Foreground(lipgloss.Color("#FF6B6B")).
				Bold(true).
				Render(tab))
		} else {
			tabs = append(tabs, tab)
		}
	}
	return strings.Join(tabs, " | ")
}

func (m *DBModel) renderOverview() string {
	if m.stats == nil {
		return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
	}

	data := [][]string{
		{"–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", fmt.Sprintf("%d / %d", m.stats.ActiveConnections, m.stats.MaxConnections)},
		{"–†–∞–∑–º–µ—Ä –ë–î", m.stats.DatabaseSize},
		{"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü", fmt.Sprintf("%d", m.stats.TableCount)},
		{"–û–±–Ω–æ–≤–ª–µ–Ω–æ", m.stats.LastUpdate.Format("15:04:05")},
	}

	var sb strings.Builder
	for _, row := range data {
		sb.WriteString(fmt.Sprintf("%-20s: %s\n", row[0], row[1]))
	}

	// –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	connectionPercent := float64(m.stats.ActiveConnections) / float64(m.stats.MaxConnections)
	progressBar := m.renderProgressBar(connectionPercent, 30)
	sb.WriteString(fmt.Sprintf("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %s %.1f%%\n",
		progressBar, connectionPercent*100))

	return sb.String()
}

func (m *DBModel) renderTables() string {
	if m.stats == nil || len(m.stats.Tables) == 0 {
		return "–ù–µ—Ç —Ç–∞–±–ª–∏—Ü"
	}

	var sb strings.Builder
	sb.WriteString("–¢–∞–±–ª–∏—Ü—ã:\n\n")

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
	header := fmt.Sprintf("%-20s %-10s %-15s %-10s", "–ò–º—è", "–°—Ç—Ä–æ–∫", "–†–∞–∑–º–µ—Ä", "–ò–Ω–¥–µ–∫—Å—ã")
	sb.WriteString(lipgloss.NewStyle().Bold(true).Render(header) + "\n")
	sb.WriteString(strings.Repeat("-", len(header)) + "\n")

	// –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü
	for _, table := range m.stats.Tables {
		row := fmt.Sprintf("%-20s %-15s %-10d",
			table.Name, table.Size, table.Indexes)
		sb.WriteString(row + "\n")
	}

	return sb.String()
}

func (m *DBModel) renderSlowQueries() string {
	if m.stats == nil || len(m.stats.SlowQueries) == 0 {
		return "–ù–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
	}

	var sb strings.Builder
	sb.WriteString("–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n")

	for i, query := range m.stats.SlowQueries {
		sb.WriteString(fmt.Sprintf("%d. %s\n", i+1, query.Query))
		sb.WriteString(fmt.Sprintf("   –í—Ä–µ–º—è: %v | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n\n",
			query.Duration, query.User))
	}

	return sb.String()
}

func (m *DBModel) renderProgressBar(percent float64, width int) string {
	filled := int(percent * float64(width))
	bar := strings.Repeat("‚ñà", filled) + strings.Repeat("‚ñë", width-filled)
	return bar
}

func tick() tea.Cmd {
	return tea.Tick(time.Second*2, func(t time.Time) tea.Msg {
		return tickMsg(t)
	})
}
